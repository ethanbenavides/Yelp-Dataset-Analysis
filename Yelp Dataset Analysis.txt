Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = PRIMARY KEY id = 10000, FOREIGN KEY business_id = 8090, FOREIGN KEY user_id = 9581
vi. Checkin = 493
vii. Photo = PRIMARY KEY id = 10000, FOREIGN KEY business_id = 6493
viii. Tip = FOREIGN KEY user_id = 537, FOREIGN KEY business_id = 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: There are no columns with null values in the Users table.
	
	SQL code used to arrive at answer:
	
	SELECT *
	FROM user
	WHERE   (id
		OR name
		OR review_count
		OR yelping_since
		OR useful
		OR funny
		OR cool
		OR fans
		OR average_stars
		OR compliment_hot
		OR compliment_more
		OR compliment_profile
		OR compliment_cute
		OR compliment_list
		OR compliment_note
		OR compliment_plain
		OR compliment_cool
		OR compliment_funny
		OR compliment_writer
		OR compliment_photos) IS NULL



4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT  B.city
        	,SUM(B.review_count) AS total_review_count
	FROM business B
	GROUP BY B.city
	ORDER BY total_review_count DESC;
	
	Copy and Paste the Result Below:
	
	+-----------------+--------------------+
	| city            | total_review_count |
	+-----------------+--------------------+
	| Las Vegas       |              82854 |
	| Phoenix         |              34503 |
	| Toronto         |              24113 |
	| Scottsdale      |              20614 |
	| Charlotte       |              12523 |
	| Henderson       |              10871 |
	| Tempe           |              10504 |
	| Pittsburgh      |               9798 |
	| Montréal        |               9448 |
	| Chandler        |               8112 |
	| Mesa            |               6875 |
	| Gilbert         |               6380 |
	| Cleveland       |               5593 |
	| Madison         |               5265 |
	| Glendale        |               4406 |
	| Mississauga     |               3814 |
	| Edinburgh       |               2792 |
	| Peoria          |               2624 |
	| North Las Vegas |               2438 |
	| Markham         |               2352 |
	| Champaign       |               2029 |
	| Stuttgart       |               1849 |
	| Surprise        |               1520 |
	| Lakewood        |               1465 |
	| Goodyear        |               1155 |
	+-----------------+--------------------+
	
6. Find the distribution of star ratings to the businesses in the following cities:

i. Avon

	SQL code used to arrive at answer:

	SELECT  stars AS star_rating
		,COUNT(name) AS count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars;

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------------+-------+
	| star_rating | count |
	+-------------+-------+
	|         1.5 |     1 |
	|         2.5 |     2 |
	|         3.5 |     3 |
	|         4.0 |     2 |
	|         4.5 |     1 |
	|         5.0 |     1 |
	+-------------+-------+

	ii. Beachwood

	SQL code used to arrive at answer:

	SELECT  stars AS star_rating
		,COUNT(name) AS count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars;

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
			
	+-------------+-------+
	| star_rating | count |
	+-------------+-------+
	|         2.0 |     1 |
	|         2.5 |     1 |
	|         3.0 |     2 |
	|         3.5 |     2 |
	|         4.0 |     1 |
	|         4.5 |     2 |
	|         5.0 |     5 |
	+-------------+-------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT  name
        	,review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3;

	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+


8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	I think there could be a rough correlation between the number of reviews and the number of fans, seeing that users with zero to little reviews have very little fans and more reviews will ultimately mnean more fans; however, there does not seem to be a reliable and direct correlation between the number of reviews and the number of fans due to the fact that the number of fans is sparse for each user, and some users with fewer reviews have more fans as compared to other users with more reviews. Based on this evidence, there does not seem to be a correlation between the number of reviews and the number of fans.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love" in them.

	SQL code used to arrive at answer:

	SELECT  /*  take the sum of the case statement where if the text has
            	the word 'love' in it then it counts as a 1, and if not,
            	then it's a zero*/
		SUM(
		CASE
			WHEN text LIKE '%love%' THEN 1 
			ELSE 0 
		END) AS love
		
		/*  take the sum of the case statement where if the text has
		the word 'hate' in it then it counts as a 1, and if not,
		then it's a zero*/
		,SUM(
		CASE
			WHEN text LIKE '%hate%' THEN 1
			ELSE 0
		END) AS hate
	FROM review;
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT  name
		,fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+



Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	I picked the city of Toronto in Ontario, Canada, and the category of restaurants.
	The group of 4-5 star restaurants consists of Cabin Fever (4.5 stars), Sushi Osaka (4.5 stars), and Edulis (4 stars).
	The group of 2-3 star restaurants consists of Big Smoke Burger (3 stars), Pizzaiolo (3 stars), and 99 Cent Sushi (2 stars).	
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	They have different distributions of hours, but overall they're pretty similar. The 2-3 star rated restaurants open between 10 a.m. and 11:00 a.m. and stay open until about 9:00 p.m. to 11:00 p.m. respectively with the exception of one of the places staying open until 4:00 a.m. The 4-5 star restaurants open between 4:00 p.m. and 6:00 p.m. to 11:p.m. and 2:00 a.m. respectively with the exception of one of the restaurants staying open from 11:00 a.m. to 11:00 p.m..

ii. Do the two groups you chose to analyze have a different number of reviews?
         
	Yes, the group that has 4-5 stars has a total of 123 reviews, whereas the group that has 2-3 stars has a total of 86 reviews. The 4-5 star group has a wide range of reviews, ranging from 8 reviews for Etobicoke up to 89 for Niagara while the group for 2-3 stars ranges from 5 reviews for 99 Cent Sushi to 47 for Big Smoke Burger.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	Two of the six restaurants are located in the Downtown Core neighborhood and both of them are in the 2-3 star category. There could be some correlation between the neighborhood and the average star rating of restaurants, but there isn't enough data to infer such a conclusion.

SQL code used for analysis:

	SELECT  -- group restaurants by 2-3 stars and 4-5 stars
		CASE
			WHEN (B.stars >= 4.0) THEN '4-5 stars'
			WHEN (B.stars >= 2.0 AND B.stars <= 3.0) THEN '2-3 stars'
			ELSE B.stars
		END star_rating

		-- columns to be listed
		,B.name
		,B.neighborhood
		,B.address
		,B.postal_code
		,H.hours
		,C.category
		,B.stars
		,B.review_count
	FROM business B
	-- join category and hours tables
	INNER JOIN category C ON B.id = C.business_id
	INNER JOIN hours H ON B.id = H.business_id
	-- filter down to restaurants in Toronto
	WHERE C.category = 'Restaurants' AND B.city = 'Toronto'
	-- group by name for readability; comment out for whole list
	GROUP BY B.name
	-- order by stars from highest to lowest - also for readability
	ORDER BY B.stars DESC;	

	+-------------+------------------+------------------------+-----------------------+-------------+----------------------+-------------+-------+--------------+
	| star_rating | name             | neighborhood           | address               | postal_code | hours                | category    | stars | review_count |
	+-------------+------------------+------------------------+-----------------------+-------------+----------------------+-------------+-------+--------------+
	| 4-5 stars   | Cabin Fever      | High Park              | 1669 Bloor Street W   | M6P 1A6     | Saturday|16:00-2:00  | Restaurants |   4.5 |           26 |
	| 4-5 stars   | Sushi Osaka      | Etobicoke              | 5084 Dundas Street W  | M9A 1C2     | Saturday|11:00-23:00 | Restaurants |   4.5 |            8 |
	| 4-5 stars   | Edulis           | Niagara                | 169 Niagara Street    | M5V         | Saturday|18:00-23:00 | Restaurants |   4.0 |           89 |
	| 2-3 stars   | Big Smoke Burger | Downtown Core          | 260 Yonge Street      | M4B 2L9     | Saturday|10:30-21:00 | Restaurants |   3.0 |           47 |
	| 2-3 stars   | Pizzaiolo        | Entertainment District | 270 Adelaide Street W | M5H 1X6     | Saturday|10:00-4:00  | Restaurants |   3.0 |           34 |
	| 2-3 stars   | 99 Cent Sushi    | Downtown Core          | 389 Church Street     | M5B 2E5     | Saturday|11:00-23:00 | Restaurants |   2.0 |            5 |
	+-------------+------------------+------------------------+-----------------------+-------------+----------------------+-------------+-------+--------------+
			
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
	Restaurants still open: 
		1. Big Smoke Burger
		2. Cabin Fever
		3. Edulis
		4. Naniwa-Taro
		5. Pizzaiolo
		5. Royal Dumpling
		6. Sushi Osaka
		7. The Kosher Gourmet

	Restaurants closed:		
		1. 99 Cent Sushi
		2. Mama Mia

i. Difference 1:

	There's a difference in the average number of reviews between the restaurants that are open and the ones that are closed:

	Open: AVG(B.review_count) = 35.75
	Closed: AVG(B.review_count) = 6.5
         
ii. Difference 2:
         
    There's a difference in the average number of stars between the restaurants that are open and the ones that are closed:
	
	Open: AVG(B.stars) = 3.5
	Closed: AVG(B.stars) = 3.0
         
SQL code used for analysis:

	SELECT  -- columns to be listed
		B.is_open
		,AVG(B.stars)
		,AVG(B.review_count)    
	FROM business B
	-- join category table
	INNER JOIN category C ON B.id = C.business_id
	-- filter down to restaurants in Toronto
	WHERE C.category = 'Restaurants' AND B.city = 'Toronto'
	-- group by open status for readability
	GROUP BY B.is_open
	-- order by if the restaurant is open or not - also for readability
	ORDER BY B.is_open DESC;

	+---------+--------------+---------------------+
	| is_open | AVG(B.stars) | AVG(B.review_count) |
	+---------+--------------+---------------------+
	|       1 |          3.5 |               35.75 |
	|       0 |          3.0 |                 6.5 |
	+---------+--------------+---------------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

    I will analyze a dataset consisting of the number of reviews an elite yelper has as well as how long they've maintained their elite status. This will be used for predicting the average number of reviews that it takes for a user to become an elite yelper.

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

	I originally planned to use keyword parsing on top of my review analysis to allow for a more accurate prediction algorithm, but after familiarizing myself with the data, I decided to leave the keyword parsing out due to there not being enough review entries for elite yelpers. Instead, I only used the average number of reviews per year for each elite yelper. To get this, I calculated the number of years that each elite yelper had their elite status, then calculated the average number of reviews per year of their elite status by dividing the review count by the number of years they were elite. I also included data on the timeframe that each person had their elite status to see if there was any correlation between reviews per year and the years they were elite. I chose to use this data because I thought it was the best way to create an idea for a minimum number of reviews a person should make before they are promoted to the status of elite.

                  
iii. Output of your finished dataset: On average, a user needs to post about 71 reviews per year to achieve elite status.
         
	+---------+------------+--------------+-------------+----------------------+
	| name    | time_elite | review_count | years_elite | avg_reviews_per_year |
	+---------+------------+--------------+-------------+----------------------+
	| Lissa   | 2009-2017  |          834 |           9 |                   92 |
	| Ed      | 2010-2017  |          904 |           8 |                  113 |
	| Dominic | 2011-2017  |          836 |           7 |                  119 |
	| Elaine  | 2011-2017  |          332 |           7 |                   47 |
	| Dixie   | 2012-2017  |          503 |           6 |                   83 |
	| Jia     | 2012-2017  |          228 |           6 |                   38 |
	| Matt    | 2012-2017  |          476 |           6 |                   79 |
	| Danial  | 2012-2016  |          136 |           5 |                   27 |
	| Justin  | 2014-2017  |          177 |           4 |                   44 |
	| Mel     | 2012-2015  |          156 |           4 |                   39 |
	| Nieves  | 2014-2017  |          178 |           4 |                   44 |
	| Chris   | 2011-2013  |           70 |           3 |                   23 |
	| Lalena  | 2015-2017  |          224 |           3 |                   74 |
	| Tasha   | 2014-2016  |          250 |           3 |                   83 |
	| Brad    | 2013-2014  |          182 |           2 |                   91 |
	| Kristen | 2016-2017  |          428 |           2 |                  214 |
	| Tracy   | 2016-2017  |           71 |           2 |                   35 |
	| Jamie   | 2014       |           95 |           1 |                   95 |
	| Keith   | 2017       |           61 |           1 |                   61 |
	| Maung   | 2017       |           54 |           1 |                   54 |
	| Sapna   | 2017       |           38 |           1 |                   38 |
	+---------+------------+--------------+-------------+----------------------+
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT  U.name
        
		-- group and label the years they were elite as 20XX-20YY
		,CASE
			WHEN MAX(E.year) <> MIN(E.year) THEN (MIN(E.year) || '-' || MAX(E.year))
			ELSE E.year
		END AS time_elite

		,U.review_count

		-- selects and calculates the year when more than one year as an elite
		,CASE
			WHEN MAX(E.year) <> MIN(E.year) THEN MAX(E.year) - MIN(E.year) + 1
			ELSE 1
		END AS years_elite

		-- total review count per user / number of years elite = avg reviews per year
		,U.review_count / (CASE
			WHEN MAX(E.year) <> MIN(E.year) THEN MAX(E.year) - MIN(E.year) + 1
			ELSE 1
		END) AS avg_reviews_per_year
	FROM user U
	INNER JOIN elite_years E ON E.user_id = U.id
	GROUP BY U.name
	ORDER BY years_elite DESC;
